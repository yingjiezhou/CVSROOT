#!/bin/bash

#SBATCH -N <nodeNumber>  # number of nodes
# The -c is for SLURM.  THREADS is for tasks farmer.   If you don't include the -c, SLURM will put everything on one core. For Cori: -c 64, Edison -c 48
#SBATCH -c64 -C haswell # 123 GB RAM
#-SBATCH -c48  # Edison, 59 GB RAM

#<debg_part>SBATCH --partition debug -t 00:29:00   -J starFarm-dbg
#<regu_part>SBATCH  --partition regular -t <wallHour>:30:00   -J starFarm-reg
#<prem_part>SBATCH  --partition regular -t <wallHour>:30:00 --qos=premium   -J starFarm-prem

# pick the image you need
#SBATCH --image=<shifter>

#SBATCH -L SCRATCH   #note: specify license need for the file systems your job needs, such as SCRATCH,project

# pick STAR library you want to use
export STAR_VER=<starLib>
export EXEC_NAME=root4star

# here taskfarmer code resides 
#module load taskfarmer
export PATH=$PATH:/usr/common/tig/taskfarmer/1.5/bin

# optimize taskFramer
export SKEW=<skewNumber>  # (sec) stagger first wave of task farmer tasks
export THREADS=<nThreads> # how many task per node , can be less than '-c'value but not more
export NUM_EVE=<nevents> # warn, may be changed in star-.csh task

myTaskList=<taskList>
myTaskCSH=r4sTask_embed.csh
codeDir=`pwd`
monQA=`pwd`/mon.farmer-$SLURM_JOB_ID  

echo this is my task list
ls -l $myTaskList
if [ ! -e  $myTaskList ] ;then
     echo "starFarmer error : file $myTaskList does not exist!" 
     exit 1
fi
nl  $myTaskList | tail -n3

env | grep SLURM

if  [ $SLURM_JOB_NUM_NODES -le 1 ];     then
    echo "taskFarmer must  use more than 1 node, increase N, aborting "
        exit 20
fi

if  [ $THREADS -gt $SLURM_CPUS_PER_TASK ];     then
    echo "taskFarmer must NOT run more tasks than threads, aborting "
    exit 21
fi

# prepare sandbox 
wrkDir=$SCRATCH/starFarm-$SLURM_JOBID
export WRK_DIR=$wrkDir
rm -rf $wrkDir
mkdir -p $wrkDir/logs

# it is safer to copy all code to the sandbox, so job still runs fine even if you recompile your local code 
cp -rpL $codeDir/StRoot $codeDir/pams $codeDir/StarDb $codeDir/Input  $wrkDir
# the taskFarmer related code must be copied to the sadnbox
cp -rpL  $myTaskCSH $myTaskList  $wrkDir

#here  my task description script resides, needed by taskFarmer
export PATH=$PATH:$wrkDir

# goto sandbox
cd $wrkDir

export localDB=<localDB>
if [ "$localDB" == "1" ]; then
echo "M - - - - -   local STAR DB deployment - - - - "`date`
usrDbConfXml=dbLoadBalLocConf.xml
myDbVault=$wrkDir/mysql51Vault
srcDbVault=/global/projecta/projectdirs/starprod/db/starDB-master/latest
echo DB-source $srcDbVault
ls -l $srcDbVault/../

export DBCONF_PATH=$wrkDir/$usrDbConfXml

echo redirect to local DB  for STAR jobs
# disable this 1 line to swithc back to public external STAR DB
export DB_SERVER_LOCAL_CONFIG=$DBCONF_PATH

echo "M conf=$DBCONF_PATH ,  copy DB clone ..."
time cp -rp $srcDbVault/  $wrkDir/mysql51Vault
cp  ./StRoot/macros/embedding/cori/$usrDbConfXml $wrkDir

#0 echo tmp-hack for one-only local DB 
#0 myDbVault=/global/project/projectdirs/mpccc/balewski/myStarDB/mysql51Vault-2018-02-22d3d

NN=`hostname -f`
echo   M-$NN before starting DB-server using  $myDbVault '  '`date`
srun -N 1 -n 1 shifter --image=balewski/mysql51-balewski:c --volume=$myDbVault:/mysqlVault  ./StRoot/macros/embedding/cori/starLocalDb.sh  &


# wait for DBserver start
nSleep=5
dbOK=0
for i in `seq 1 40`; do
    sleep $nSleep
    echo  -n M-$NN  after-srun-db i=$i  sleep $nSleep "sec "
    date
    # check if the string was replaced --> DB runs
    grep db_server_ip $DBCONF_PATH
    if [ $? -ne 0  ]; then
        echo "M-$NN  found DB-IP , proceed "
        dbOK=1
        break
    fi
done

if [ $dbOK -eq 0  ]; then
    echo "M-$NN  NOT found DB-IP , time out, i=$i, abort SLURM job"
    exit
fi

echo "M - - - - -   local STAR DB deployment completed - - - -"
fi

echo   farmer  qa-utility start in background "  "`date`
pwd
./StRoot/macros/embedding/cori/farmerQAutil.sh  $myTaskList $monQA &

echo run job in STAR_VER=$STAR_VER  wrkDir=$wrkDir
echo see vCores=$SLURM_CPUS_ON_NODE,  use   THREADS=$THREADS
echo count vCores=`lstopo -c | grep PU | nl |tail -n1`  

whoami
env|grep  SHIFTER_RUNTIME
echo 'run myFarmer in '`pwd`
ls -la
echo "enter cgroup ---- will be in SL6 "`date`
# minor operation allowing to jump into tcsh inside shifter image
unset MODULE_VERSION_STACK
unset MODULE_VERSION
unset MODULEPATH MODULESHOME
unset LOADEDMODULES PRGENVMODULES
echo 'starting taskFarmer '`date`
#Prepare environment and run job...

runcommands.sh  $myTaskList
echo "leave cgroup ---- back in Suse "`date`
