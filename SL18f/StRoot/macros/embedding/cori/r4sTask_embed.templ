#!/bin/tcsh 
# this script produced from template on: <scriptProdDate>

# sequence of steps for one r4s embedding task
# *) parse input vars 
# *) build fset-dependent sandbox using final path staring w/ ${Trigger set name}/bhla
# *) run embedding in the sandbox
# *) gzip r4s-log file 

echo r4s-start `date` "  host-is " `hostname`

# set the time spread per task on each node
if ( ! -f ${WRK_DIR}/skewdone ) then
   set WNODES=`expr $SLURM_JOB_NUM_NODES - 1`
   set SKEWPERNODE=`expr $SKEW / $WNODES`
   set  nsleep=`perl -e "srand; print int(rand($SKEWPERNODE))"`
   echo nsleep=$nsleep seconds sleep for this task \(SKEW=$SKEW, SKEWPERNODE=$SKEWPERNODE\)
   sleep $nsleep
endif

# Note, all code in this scrpt is executed under tcsh

    set coreN = $argv[1]    
    set fSet = $argv[2]
    if ( "$argv[3]" == "" ) then 
	echo "use global NUM_EVE ="$NUM_EVE
    else 
	set NUM_EVE = $argv[3]
	echo "use task-varied NUM_EVE ="$NUM_EVE
    endif

    # those variables could have been set in the SLURM job script
    #  and need to be overwritten when templeate is processed
    set STAR_VER = <starLib>
    set PATH_DAQ = <daqPath>
    set PATH_TAG = <tagPath>
        
    echo  starting new r4s PATH_DAQ=$PATH_DAQ, coreN=$coreN, execName=$EXEC_NAME, NUM_EVE=$NUM_EVE, fSet=$fSet, workerName=`hostname -f`', startDate='`date`
    echo 'pwd='`pwd` ' WRK_DIR='${WRK_DIR}  

    set daqN = $PATH_DAQ/$coreN.daq
    set mtags = <moretagsMode>
    if ( "$mtags" == "0" ) then
       set tagsN = $PATH_TAG/$coreN.tags.root
    else
       set tagsN = $PATH_TAG/$coreN.moretags.root
    endif
    set fzdN =  $coreN.fzd
    set r4sLogFile = ${coreN}.r4s_${fSet}.log

    ls -l $daqN
    ls -l $tagsN

    cd ${WRK_DIR} # important, no clue why I  need to do it again
    pwd
    ls -la  . StRoot/ 


    set EMYEAR = `perl StRoot/macros/embedding/getYearDayFromFile.pl -y ${coreN}`
    set EMDAY = `perl StRoot/macros/embedding/getYearDayFromFile.pl -d ${coreN}`
    set EMRUN = `perl StRoot/macros/embedding/getYearDayFromFile.pl -r ${coreN}`


    # Prepare final storage dir, aka sandbox
    # for the final storage of embedding data the FSET_PATH is
    # ./${trigger set name}/${Embeded Particle}_${fSet}_${embedding requestID}/
    # The files in each fSet the REQUEST_PATH
    # ${Embeded Particle}_${fSet}_${embedding requestID}/${starProdID}.${STARLIB}/${YEAR}/${DAY}/st*
    # e.g: 
    # ls production_pp200_2015/Psi2SMuMu_104_20163401/P16id.SL16d/2015/114
    # st_mtd_adc_16114049_raw_5500008.30D2B4FE3C7A1F23_548.log.gz
    # st_mtd_adc_16114049_raw_5500008.event.root
    # st_mtd_adc_16114049_raw_5500008.geant.root

    set FSET_PATH = <outPath>/<triggerSetName>/<particleName>_${fSet}_<embedRequestID>
    set REQUEST_PATH = <starProdID>.<starLib>/${EMYEAR}/${EMDAY}/${EMRUN}
    echo my FSET_PATH=$FSET_PATH
    echo my REQUEST_PATH=$REQUEST_PATH
    
    #
    # - - - -  D O   N O T  T O U C H  T H I S   S E C T I O N- - - - 
    #

    echo os-in-shifter is
    cat /etc/*release

    echo "check if in shifter (expected 1)"
    env | grep  SHIFTER_RUNTIME
    
    whoami    

    set localDBconfig = $DB_SERVER_LOCAL_CONFIG
    echo  load STAR enviroment 
    set cvmfs=<cvmfs>
    if ( "$cvmfs" == "1" ) then
	 set NCHOS = sl74
	 set SCHOS = 74
	 set DECHO = 1
	 setenv GROUP_DIR /cvmfs/star.sdcc.bnl.gov/group
	 setenv USE_CVMFS 1
    else
	 set NCHOS = sl64
	 set SCHOS = 64
	 set DECHO = 1
	 setenv GROUP_DIR /common/star/star${SCHOS}/group/
    endif
    source $GROUP_DIR/star_cshrc.csh    
     
    echo testing STAR setup $STAR_VER in `pwd`
    starver $STAR_VER 
    env |grep STAR

    echo 'my new STAR ver='$STAR'  test '$EXEC_NAME' '
    $EXEC_NAME -b -q 

    #
    # - - - -   Y O U   C A N   C H A N G E   B E L O W  - - - -
    #
    echo my pwd=`pwd`
    ls -la  . StRoot/ 
    #set sandBox = $FSET_PATH/$REQUEST_PATH
    set sandBox = `hostname`.$$
    echo check sandbox  $sandBox
    if ( -d $sandBox) then 
	echo "sandbox exist - delete it !"
	rm -rf $sandBox
    endif
    pwd
    umask 2
    mkdir -p $sandBox
    ln -s ${WRK_DIR}/StRoot  $sandBox
    if ( -d ${WRK_DIR}/pams ) then
      ln -s ${WRK_DIR}/pams  $sandBox
    endif
    if ( -d ${WRK_DIR}/StarDb ) then
      ln -s ${WRK_DIR}/StarDb  $sandBox
    endif
    if ( -d ${WRK_DIR}/Input ) then
      ln -s ${WRK_DIR}/Input  $sandBox
    endif
    echo step into sandbox 

    set localDB=<localDB>
    if ( "$localDB" == "1" ) then
    echo "  DB  DB  DB  DB    DB  DB  DB  DB    DB  DB  DB  DB  --- check start"
    setenv DB_SERVER_LOCAL_CONFIG $localDBconfig
    echo get IP of local DB to verify it is accessible
    cat $DB_SERVER_LOCAL_CONFIG
    set dbIP = `grep "Host name=" $DB_SERVER_LOCAL_CONFIG | cut -f2 -d\"`
    echo star-db-IP=$dbIP  tables seen by st_db_maker
    mysql  --socket=/mysqlVault/mysql.sock -h$dbIP -e 'show databases'
    echo check if loadbalancer sees  processlist
    mysql -u loadbalancer -P3306 -plbdb -h $dbIP -e 'show processlist';
    echo "  DB  DB  DB  DB    DB  DB  DB  DB    DB  DB  DB  DB  --- check end"
    endif
  
    cd $sandBox
    pwd
    cons
    ls -la  . StRoot/ .sl${SCHOS}* 
    ls -la  .sl${SCHOS}*/lib/  
    echo "===FIRE  $EXEC_NAME for coreN=$coreN fSet=$fSet "`date`

    # make sure local .cxx was copied to wrk-dir and compiled correctly in advance 
    echo start embedding for $NUM_EVE events  on $coreN r4sLogFile=$r4sLogFile
    echo full r4s log  $sandBox/$r4sLogFile
    if ( -f $r4sLogFile ) then
	 rm -f $r4sLogFile
    endif
    touch $r4sLogFile

    # setup and executing simulator
    set simumode = <simulatorMode>
    set zbmode   = <zerobiasMode>
    if ( "$simumode" != "0" ) then
	 set daqevents=<daqEvents>
	 set kumac=<kumacFile>
	 set fzdFile=$fzdN
	 set random=`<seed>`
	 set seed=`echo $random | awk '{print $1}'`
	 set ptmin=<ptmin>
	 set ptmax=<ptmax>
	 set nevents=`grep $coreN $daqevents | awk '{print $2}'`
	 set nsimevents=$nevents
	 if ( $nevents > $NUM_EVE ) then
	    set nsimevents = $NUM_EVE
	 endif
	 echo nevents = $nevents, nsimevents = $nsimevents, seed = $seed, kumac = $kumac, fzdFile=$fzdFile, ptmin = $ptmin, ptmax = $ptmax >>& $r4sLogFile
	 $EXEC_NAME -b -q $kumac\($nsimevents,$seed,\"$fzdFile\",\"$tagsN\",<mult>,<geantPID>,<ptmin>,<ptmax>,<ymin>,<ymax>\) >>& $r4sLogFile
	 if ( "$zbmode" != "0" ) then
	    echo DAQ FILE has $nevents events
	    echo We need $NUM_EVE
	    if ( $nevents > $NUM_EVE ) then
		 set nmax = `echo "$nevents-${NUM_EVE}-1" | bc`
		 set first = `shuf -i 1-$nmax -n 1`
		 set last  = `echo "${first}+${NUM_EVE}" | bc`
		 echo We begin at ${first} and end at ${last}
	    else
		 set first = 1
	    endif
	    setenv EVENTS_START $first
	 endif
    endif
    # parsing the mixer name
    set MIXER_NAME=`basename <mixerScript> .C`

    date
    time $EXEC_NAME -b <<EOF >>& $r4sLogFile
    std::vector<Int_t> triggers;
<triggers_push_back>
    .L <mixerScript>
     $MIXER_NAME($NUM_EVE, "$daqN", "$tagsN",<ptmin>, <ptmax>, <ymin>, <ymax>,  -<zVertMax>, <zVertMax>, <vrcut>, <geantPID>, <mult> , triggers, "<prodName>", "<ptMode>", $simumode, "$fzdN");
    .q
EOF

    echo "done embedding for $coreN  "`date`
    ls -la
    gzip $r4sLogFile
    if ( ! -d $FSET_PATH ) then
	 mkdir -p $FSET_PATH
	 chmod g+s $FSET_PATH
    endif
    if ( ! -d $FSET_PATH/$REQUEST_PATH ) then
	 mkdir -p $FSET_PATH/$REQUEST_PATH
    endif
    chmod 664 st_*root
    cp -p st_*root $FSET_PATH/$REQUEST_PATH/
    if ( ! -z "`ls st*.fzd`" ) then
	 chmod 664 st*.fzd
	 cp -p st*.fzd $FSET_PATH/$REQUEST_PATH/
    endif
    chmod 664 st*.log.gz
    cp -p st*.log.gz $FSET_PATH/$REQUEST_PATH/

    cd ${WRK_DIR}
    rm -rf $sandBox
    echo end of task  coreN=$coreN fSet=$fSet
